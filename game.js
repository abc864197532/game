const result = [['home', 'weather', 'balltypes', 'score_diff', 'ball', 'strike', 'out', 'pitch_num', '1b', '2b', '3b', 'batter_today_single', 'batter_today_double', 'batter_today_home', 'batter_today_walk', 'batter_today_out', 'batter_today_long', 'batter_last5_single', 'batter_last5_double', 'batter_last5_triple', 'batter_last5_home', 'batter_last5_walk', 'batter_last5_out', 'batter_last5_long', 'batter_last10_single', 'batter_last10_double', 'batter_last10_triple', 'batter_last10_home', 'batter_last10_walk', 'batter_last10_out', 'batter_last10_long', 'batter_season_single', 'batter_season_double', 'batter_season_triple', 'batter_season_home', 'batter_season_walk', 'batter_season_out', 'batter_season_long', 'bs_double', 'bs_triple', 'bs_walk', 'fs_triple', 'blr_single', 'blr_double', 'blr_triple', 'blr_home', 'blr_walk', 'blr_out', 'blr_long', 'pitcher_last3_double', 'pitcher_last3_triple', 'pitcher_last3_home', 'pitcher_last3_out', 'pitcher_last5_single', 'pitcher_last5_triple', 'pitcher_last5_walk', 'pitcher_last5_out', 'pitcher_season_single', 'pitcher_season_double', 'pitcher_season_triple', 'pitcher_season_home', 'pitcher_season_walk', 'pitcher_season_out', 'pitcher_season_long', 'plr_single', 'plr_triple', 'plr_out', 'batter_balltype_triple', 'batter_balltype_home', 'batter_balltype_long', 'merged_result', 'predicted_result'],
['1', '0.567901235', '12', '-0.166666667', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0.5', '0', '0.5', '0.5', '0.083', '0.042', '0', '0.042', '0.083', '0.75', '0.083', '0.087', '0.065', '0', '0.022', '0.043', '0.783', '0.087', '0.141', '0.052', '0.005', '0.033', '0.073', '0.696', '0.09', '0.049', '0', '0', '0', '0.141', '0.052', '0.005', '0.033', '0.073', '0.696', '0.09', '0.053', '0', '0.067', '0.613', '0.206', '0', '0.066', '0.632', '0.162', '0.033', '0.004', '0.027', '0.075', '0.699', '0.064', '0.162', '0.004', '0.699', '0.131', '0.108', '0.115', '3', '3'],
['0', '0.691358025', '13', '-0.041666667', '0.75', '1', '0.5', '0.35', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0.083', '0.125', '0', '0.042', '0.042', '0.708', '0.167', '0.17', '0.085', '0.021', '0.021', '0.043', '0.66', '0.128', '0.176', '0.052', '0.008', '0.008', '0.092', '0.664', '0.068', '0.021', '0.021', '0.25', '0', '0.176', '0.052', '0.008', '0.008', '0.092', '0.664', '0.068', '0.037', '0', '0.012', '0.732', '0.153', '0', '0.084', '0.702', '0.146', '0.049', '0', '0.024', '0.084', '0.696', '0.073', '0.146', '0', '0.696', '0.136', '0.264', '0.179', '3', '3'],
['0', '0.444444444', '4', '0', '0', '1', '0', '0.1', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0.111', '0', '0', '0', '0.056', '0.833', '0', '0.167', '0', '0', '0', '0.056', '0.778', '0', '0.156', '0.036', '0.01', '0.01', '0.073', '0.714', '0.057', '0', '0', '0', '0.008', '0.156', '0.036', '0.01', '0.01', '0.073', '0.714', '0.057', '0', '0', '0', '0.667', '0.3', '0', '0.1', '0.55', '0.185', '0.019', '0', '0', '0.056', '0.741', '0.019', '0.185', '0', '0.741', '0.609', '0.029', '0.257', '3', '3'],
['0', '0.691358025', '0', '-0.125', '0.5', '1', '1', '0.2', '0', '1', '0', '0', '0', '0', '1', '0', '0', '0.182', '0', '0', '0.182', '0.091', '0.545', '0.182', '0.222', '0.037', '0', '0.074', '0.074', '0.593', '0.111', '0.153', '0.049', '0', '0.041', '0.09', '0.666', '0.091', '0.038', '0', '0', '0', '0.153', '0.049', '0', '0.041', '0.09', '0.666', '0.091', '0.06', '0', '0.015', '0.522', '0.263', '0', '0.101', '0.535', '0.163', '0.039', '0.006', '0.029', '0.074', '0.689', '0.074', '0.163', '0.006', '0.689', '0', '0.181', '0.125', '1', '3'],
['0', '0.617283951', '12', '-0.041666667', '0.5', '1', '0.5', '0.2', '1', '1', '0', '0.5', '0', '0', '0', '0.5', '0', '0.048', '0', '0', '0.048', '0.095', '0.81', '0.048', '0.077', '0.026', '0', '0.026', '0.103', '0.769', '0.051', '0.121', '0.037', '0.013', '0.013', '0.075', '0.742', '0.062', '0.059', '0.029', '0', '0', '0.122', '0.033', '0.017', '0.011', '0.089', '0.728', '0.061', '0.061', '0.015', '0.03', '0.682', '0.208', '0.008', '0.05', '0.65', '0.193', '0.041', '0.01', '0.03', '0.056', '0.67', '0.081', '0.193', '0.01', '0.67', '0.07', '0.022', '0.062', '0', '3'],
['1', '0.617283951', '1', '0.041666667', '0.5', '0.5', '0.5', '0.15', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0.167', '0.042', '0', '0.042', '0.125', '0.625', '0.083', '0.178', '0.067', '0', '0.044', '0.133', '0.578', '0.111', '0.142', '0.063', '0.004', '0.049', '0.132', '0.61', '0.116', '0.104', '0.013', '0.026', '0.007', '0.142', '0.063', '0.004', '0.049', '0.132', '0.61', '0.116', '0', '0', '0', '0.417', '0.333', '0', '0.111', '0.556', '0.154', '0.023', '0', '0.021', '0.097', '0.705', '0.044', '0.154', '0', '0.705', '0.177', '0.154', '0.16', '0', '3'],
['0', '0.567901235', '4', '0', '0.25', '0.5', '1', '0.1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0.053', '0.158', '0', '0.053', '0', '0.737', '0.211', '0.075', '0.1', '0', '0.025', '0.05', '0.75', '0.125', '0.105', '0.072', '0.006', '0.03', '0.084', '0.704', '0.108', '0.095', '0.048', '0', '0.009', '0.176', '0.055', '0.011', '0.011', '0.088', '0.659', '0.077', '0.103', '0.015', '0.044', '0.618', '0.161', '0.011', '0.065', '0.645', '0.194', '0.054', '0.004', '0.027', '0.069', '0.652', '0.085', '0.194', '0.004', '0.652', '0.164', '0.192', '0.18', '3', '3'],
['0', '0.864197531', '4', '0', '0', '1', '1', '0.1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0.19', '0.048', '0', '0', '0.095', '0.667', '0.048', '0.146', '0.024', '0', '0.049', '0.098', '0.683', '0.073', '0.111', '0.043', '0.003', '0.044', '0.118', '0.681', '0.09', '0.016', '0', '0.016', '0', '0.111', '0.043', '0.003', '0.044', '0.118', '0.681', '0.09', '0.05', '0', '0.075', '0.65', '0.149', '0', '0.091', '0.653', '0.126', '0.045', '0.011', '0.045', '0.089', '0.684', '0.101', '0.126', '0.011', '0.684', '0.04', '0.141', '0.133', '3', '3'],
['0', '0.604938272', '6', '0', '0.5', '1', '0.5', '0.25', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0.176', '0', '0', '0', '0.118', '0.706', '0', '0.171', '0.057', '0', '0', '0.057', '0.714', '0.057', '0.181', '0.055', '0', '0.024', '0.047', '0.693', '0.079', '0.077', '0', '0', '0', '0.181', '0.055', '0', '0.024', '0.047', '0.693', '0.079', '0.054', '0', '0.027', '0.662', '0.132', '0', '0.078', '0.736', '0.133', '0.044', '0.002', '0.037', '0.049', '0.734', '0.084', '0.133', '0.002', '0.734', '0', '0.201', '0.117', '0', '3'],
['0', '0.555555556', '13', '0', '0.75', '1', '0.5', '0.25', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0.227', '0.045', '0.045', '0', '0.045', '0.636', '0.091', '0.182', '0.045', '0.023', '0.045', '0.068', '0.636', '0.114', '0.16', '0.059', '0.003', '0.065', '0.042', '0.671', '0.127', '0.03', '0', '0.182', '0', '0.16', '0.059', '0.003', '0.065', '0.042', '0.671', '0.127', '0.057', '0.014', '0.057', '0.614', '0.161', '0.009', '0.107', '0.616', '0.164', '0.055', '0.004', '0.032', '0.085', '0.66', '0.091', '0.164', '0.004', '0.66', '0.041', '0.299', '0.186', '2', '3']];
const verdict = ['短打', '長打', '保送', '出局'];
const YESNO = ['錯', '對'];
const ROW = 70;
const WIN = 5;
const SHOWTIME = 1000;

let play_id;
let com_score;
let user_score;
let allow_click;
let finished;

reset_game();

async function sleep(ms = 0) {
    return new Promise(r => setTimeout(r, ms));
}

function getRandomInt(min, max) {
   min = Math.ceil(min);
   max = Math.floor(max);
   return Math.floor(Math.random() * (max - min) + min);
}

function reset_game() {
    com_score = 0;
    user_score = 0;
    allow_click = 1;
    finished = 0;
    new_play();
}

function new_play() {
    play_id = getRandomInt(1, 10);
    bat_info.innerHTML = '';
    for (i = 0; i < ROW; ++i) {
        bat_info.innerHTML += result[0][i] + ': ' + result[play_id][i] + '<br>';
    }
    play.innerHTML = '請選擇你的猜測';
    update_scoreboard();
}

function update_scoreboard() {
    scoreboard.innerHTML = '電腦 ' + com_score + ' v.s. ' + user_score + ' 你';
    if (com_score >= WIN) {
        play.innerHTML = '遊戲結束，電腦獲勝';
        allow_click = 0;
        finished = 1;
    }
    if (user_score >= WIN) {
        play.innerHTML = '遊戲結束，玩家獲勝';
        allow_click = 0;
        finished = 1;
    }
}

async function guess(user_guess) {
    allow_click = 0;
    let com_guess = parseInt(result[play_id][70]);
    let true_ans = parseInt(result[play_id][71]);
    play.innerHTML = '你的猜測：' + verdict[user_guess];
    await sleep(SHOWTIME);
    play.innerHTML = '電腦的猜測：' + verdict[com_guess];
    await sleep(SHOWTIME);
    play.innerHTML = '正確答案：' + verdict[true_ans];
    await sleep(SHOWTIME);
    let user_correct = 0, com_correct = 0;
    if (user_guess == true_ans) {
        user_correct = 1;
    }
    if (com_guess == true_ans) {
        com_correct = 1;
    }
    play.innerHTML = '你猜' + YESNO[user_correct] + '了，電腦猜' + YESNO[com_correct] + '了！';
    await sleep(SHOWTIME);
    if (com_correct == user_correct) {
        play.innerHTML = '雙方分數維持不變';
    } else if (com_correct == 1) {
        play.innerHTML = '電腦獲得一分';
        com_score++;
    } else {
        play.innerHTML = '玩家獲得一分';
        user_score++;
    }
    await sleep(SHOWTIME);
    allow_click = 1;
    new_play();
    update_scoreboard();
}

document.querySelector("#short").onclick = function(e) {
    if (allow_click) {
        guess(0);
    }
};
document.querySelector("#long").onclick = function(e) {
    if (allow_click) {
        guess(1);
    }
};
document.querySelector("#walk").onclick = function(e) {
    if (allow_click) {
        guess(2);
    }
};
document.querySelector("#out").onclick = function(e) {
    if (allow_click) {
        guess(3);
    }
};
document.querySelector("#out").onclick = function(e) {
    if (allow_click) {
        guess(3);
    }
};
document.querySelector("#reset").onclick = function(e) {
    if (allow_click || finished) {
        reset_game();
    }
}